#!/bin/bash
function merge_fq {
 

fq=$(pwd)/projects/$project_name_mod/fast_data/*.fastq.gz
for i in $fq;
do
if      [[ $i == *"R1"* ]];
then
		r1+=$(basename $i)' '
elif 	[[ $i == *"R2"* ]];
then
		r2+=$(basename $i)' '
fi
done;

cd projects/$project_name_mod/fast_data
cat $r1 > input_R1.fastq.gz
cat $r2 > input_R2.fastq.gz
rm $r1 $r2

r1=
r2=

cd ..
cd ..
cd ..

}


function checkfq {
		echo ''
		echo  -e '\033[1;36m Put fastq data into => projects/'$project_name_mod/'fast_data'
		echo  -e '\033[1;36m If you did it, push ENTER'
		read enter
		
		fast=$(pwd)/projects/$project_name_mod/fast_data/*.fastq.gz
	
for i in $fast;
do
		r+=$i
done;

if      [[ $r == *"R1"* ]] && [[ $r == *"R2"* ]];
then
        echo ''
		echo -e "\033[0;32m Project done"
		echo ''
		echo  -e '\033[1;36m Merge fastq file for Read1 and Read2 - if more than one'
		echo ''
		merge_fq
		echo ''
		source=$(pwd)/scripts/genome_indexing
		source $source
		INDEXING
		
else
        echo -e '\033[0;31m Fastq data not found'
		echo -e '\033[0;31m Put data'
		checkfq
		
fi
 
	
		
}

function checkseurat_1 {
		echo ''
		echo  -e '\033[1;36m Put count genes matrix into => projects/'$project_name_mod/'sc_data'
		echo  -e '\033[1;36m Available matrix format .csv | .tsv | .txt'
		echo  -e '\033[1;36m If you did it, push ENTER'
		read enter
		
		fast=$(pwd)/projects/$project_name_mod/sc_data/*
	
for i in $fast;
do
		r+=$i
done; 		
		
if      [[ $r == *".tsv"* ]]
then

        echo  -e '\033[1;36m $(date) Data converting'
	
	format=tsv
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$project_name_mod/sc_data/ $(basename $r) $null $con
	
	
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
	
	
	start
	
elif     [[ $r == *".csv"* ]] 
then
        echo  -e '\033[1;36m $(date) Data converting'
	
	format=csv
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$project_name_mod/sc_data/ $(basename $r) $null $con
	
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
	
	jseq=$(pwd)/JSEQ
	source jseq
	start
	
elif    [[ $r == *".txt"* ]]
then
        
		echo  -e '\033[1;36m $(date) Data converting'
		
	format=txt
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$project_name_mod/sc_data/ $(basename $r) $null $con
		
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
	
	
	start
		
		
else
        echo -e '\033[1;31m Expression data not found'
		echo -e '\033[1;31m Put data'
		checkseurat_1
fi

	
		
}

function checkseurat_2 {
		echo ''
		echo  -e '\033[1;36m Put normalized expression genes matrix into => projects/'$project_name_mod/'sc_data'
		echo  -e '\033[1;36m Available matrix format .csv | .tsv | .txt'
		echo  -e '\033[1;36m If you did it, push ENTER'
		read enter
		
		fast=$(pwd)/projects/$project_name_mod/sc_data/*
	
for i in $fast;
do
		r+=$i
done; 		
		
if      [[ $r == *".tsv"* ]]
then

       echo -e '\033[1;36m $(date) Data converting'
		
	format=tsv
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$project_name_mod/sc_data/ $(basename $r) $null $con
	
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
		
	
	start
	
elif     [[ $r == *".csv"* ]] 
then

        echo  -e '\033[1;36m $(date) Data converting'
	
	format=csv
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$project_name_mod/sc_data/ $(basename $r) $null $con
	
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
		
	
	start
	
elif    [[ $r == *".txt"* ]]
then

       echo  -e '\033[1;36m $(date) Data converting'
		
	format=txt
	con=NULL
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $(pwd)/projects/$project_name_mod/sc_data/ $(basename $r) $null $con
	
		echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
		
	
	start
		
		
else
        echo -e '\033[0;31m Expression data not found'
		echo -e '\033[0;31m Put data'
		checkseurat_2
fi

	
		
}

function checkseurat_3 {
		echo ''
		echo  -e '\033[1;36m Put genes name data as genes.tsv into => projects/'$project_name_mod/'sc_data'
		echo  -e '\033[1;36m Put barcodes data as barcodes.tsv into => projects/'$project_name_mod/'sc_data'
		echo  -e '\033[1;36m Put count matrix data as matrix.mtx into => projects/'$project_name_mod/'sc_data'
		echo  -e '\033[1;36m If you did it, push ENTER'
		read enter
		
		fast=$(pwd)/projects/$project_name_mod/sc_data/*
	
for i in $fast;
do
		r+=$i
done; 		
		
if      [[ $r == *"matrix"* ]] && [[ $r == *"genes"* ]] && [[ $r == *"barcodes"* ]];
then
        echo ''
		echo -e "\033[0;32m Project done"
		echo -e "\033[0;32m Start analysis"
		echo ''
		
	
	start
		
		
else
        echo -e '\033[0;31m Expression data not found'
		echo -e '\033[0;31m Put data'
		checkseurat_3
fi

	
		
}
function PARAMETRS_fq {
echo  -e '\033[1;36m Project name:' 
echo ''
		read project_name
		project_name=$(echo $project_name | tr '[:upper:]' '[:lower:]')
echo  -e '\033[1;36m Enter operation paramets:'
echo ''
echo  -e '\033[1;36m ReadsLenght:'
echo ''
        read READS_LENGHT
echo  -e '\033[1;36m Species [human/mice/custom]:'
echo ''
        read species
		species=$(echo $species | tr '[:upper:]' '[:lower:]')
echo  -e '\033[1;36m Estimated number of cells'
echo ''
	read cell

echo  -e '\033[1;36m Choose marker set'
echo ''

marker_input=$(pwd)/requirements_file/*xlsx

select m in $marker_input; do test -n "$m" && break; echo ">>> Invalid Selection"; done
marker_path=$m

echo ''
echo ''

if [[ $READS_LENGHT -lt 300 && $READS_LENGHT -gt 0 ]] && [[ $species == 'human' || $species == 'mice' || $species == 'custom' ]] && [[ $cell -lt 1000000 && $cell -gt 0 ]];
then

echo -e "\033[0;32m Parametrs correct"
echo ''
else
        echo ''
		echo -e '\033[0;31m Wrong parametrs'
		echo -e '\033[0;31m Write right parametrs'
		echo ''
		PARAMETRS_fq
		
fi

}

function PARAMETRS_se {
echo  -e '\033[1;36m Project name:' 
echo ''
		read project_name
		project_name=$(echo $project_name | tr '[:upper:]' '[:lower:]')
echo  -e '\033[1;36m Enter operation paramets:'
echo ''

echo  -e '\033[1;36m Species [human/mice/custom]:'
echo ''
        read species
		species=$(echo $species | tr '[:upper:]' '[:lower:]')
echo  -e '\033[1;36m Estimated number of cells'
echo ''
	read cell
	
echo  -e '\033[1;36m Choose marker set'
echo ''

marker_input=$(pwd)/requirements_file/*xlsx

select m in $marker_input; do test -n "$m" && break; echo ">>> Invalid Selection"; done
marker_path=$m
echo ''
echo ''

echo  -e '\033[1;36m Data format: count_matrix [1] | normalized_expression [2] | separate genes.tsv / names.tsv / matrix.mtx files [3]'
echo ''
	read data

if [[ $species == 'human' || $species == 'mice' || $species == 'custom' ]] && [[ $cell -lt 1000000 && $cell -gt 0 ]] && [[ $data == '1' || $data == '2' || $data == '3' ]];
then

echo -e "\033[0;32m Parametrs correct"
echo ''
else
        echo ''
		echo -e '\033[0;31m Wrong parametrs'
		echo -e '\033[0;31m Write right parametrs'
		echo ''
		PARAMETRS_se
		
fi

}

function data_select {

		if [[ $data = 1 ]]
		then
			checkseurat_1
		elif [[ $data = 2 ]]
		then
			checkseurat_1
		elif [[ $data = 3 ]]
		then
			checkseurat_3
fi
}

function PROJECT {

echo  -e '\033[1;36m Create project for fastq data [1] or counts / expression data  [2]:'
read p 
p=$(echo $p | tr '[:upper:]' '[:lower:]')

if [[ $p == '2' ]]
then
		PARAMETRS_se
		
		project_name_mod=$(date +'%d-%m-%Y')'_'$project_name'_exp'
		mkdir -p projects/$project_name_mod
		mkdir -p projects/$project_name_mod/results
		mkdir -p projects/$project_name_mod/sc_data
		echo ''
		echo -e "\033[0;32m Complete"
		echo ''
        echo  -e '\033[1;36m Next step =>'
		echo ''
		
		echo project_name=$project_name > $(pwd)/projects/$project_name_mod/config
		echo project_name_mode=$project_name_mod >> $(pwd)/projects/$project_name_mod/config
		echo species=$species >> $(pwd)/projects/$project_name_mod/config
		echo cell=$cell >> $(pwd)/projects/$project_name_mod/config
		echo data=$data >> $(pwd)/projects/$project_name_mod/config
		echo marker_path=$marker_path >> $(pwd)/projects/$project_name_mod/config

		data_select
		
elif [[ $p == '1' ]]
then

		PARAMETRS_fq
		
		project_name_mod=$(date +'%d-%m-%Y')'_'$project_name'_fq'
		mkdir -p projects/$project_name_mod
		mkdir -p projects/$project_name_mod/tmp
		mkdir -p projects/$project_name_mod/results
		mkdir -p projects/$project_name_mod/fast_data
		echo ''
		echo -e "\033[0;32m Complete"
		echo ''
        echo  -e '\033[1;36m Next step =>'
		echo ''
		
		echo project_name=$project_name > $(pwd)/projects/$project_name_mod/config
		echo project_name_mode=$project_name_mod >> $(pwd)/projects/$project_name_mod/config
		echo READS_LENGHT=$READS_LENGHT >> $(pwd)/projects/$project_name_mod/config
		echo species=$species >> $(pwd)/projects/$project_name_mod/config
		echo cell=$cell >> $(pwd)/projects/$project_name_mod/config
		echo data=$data >> $(pwd)/projects/$project_name_mod/config
		echo marker_path=$marker_path >> $(pwd)/projects/$project_name_mod/config

		checkfq

else
        PROJECT
fi

}