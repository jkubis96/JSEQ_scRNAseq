#!/bin/bash 

function directory {

cd $(pwd)/projects/$project_name_mode/results
mkdir mice
mkdir human
cd ..
cd tmp
mkdir mice
mkdir human
cd ..
cd ..
cd ..

}


function TRIMMING {

echo Trimming Start

source $(pwd)/requirements_file/barcodes

umi_length=$umi_length
barcode_length=$barcode_length



RESULT=$(pwd)/projects/$project_name_mode/results/
ADAPTERS=$(pwd)/requirements_file/Adapters.fa
INFASTP=$(pwd)/projects/$project_name_mode/fast_data
CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $INFASTP/R1_out_exctracted.fastq.gz || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	for i in $INFASTP/*.fastq.gz;
	do
	if       [[ $i == *"input_R1"* ]];
	then
			R1=$i
		R1_NAME=$(basename $i)
	elif
			[[ $i == *"input_R2"* ]];
	then
			R2=$i
		R2_NAME=$(basename $i)
	else
			echo 'Not fastq'

	fi
	done;

	source $(pwd)/requirements_file/genome.conf
	qc_reads=$qc_reads
	
	cd $INFASTP

	if [[ $qc_reads == *"ON"* ]];
	then

	fastp -i $R1_NAME -I $R2_NAME -o R1_out.fastq.gz -O R2_out.fastq.gz --adapter_fasta $ADAPTERS --trim_poly_x --length_required $[$umi_length + $barcode_length]  --html $RESULT/QC_RAPORT.html 
	
	elif [[ $qc_reads == *"OFF"* ]];
	then

	fastp -i $R1_NAME -I $R2_NAME -o R1_out.fastq.gz -O R2_out.fastq.gz --adapter_fasta $ADAPTERS -Q --trim_poly_x --length_required $[$umi_length + $barcode_length]  --html $RESULT/QC_RAPORT.html 
	
	fi

	
	cd ..
	cd ..
	cd ..

else 

	echo 'Trimming was done before'
	
fi

}

function whitelist {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/whitelist_barcodes.csv || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	source $(pwd)/requirements_file/barcodes
	barcode_start=$barcode_start
	barcode_end=$barcode_end
	umi_start=$umi_start
	umi_end=$umi_end
	umi_length=$umi_length
	barcode_length=$barcode_length
	barcode=$barcode

	INFASTP=$(pwd)/projects/$project_name_mode/fast_data
	tmp=$(pwd)/projects/$project_name_mode/tmp
	RESULT=$(pwd)/projects/$project_name_mode/results/



	for i in $INFASTP/*.fastq.gz;
	do
	if       [[ $i == *"R1_out"* ]];
	then
			R1_out=$i
			R1_NAME_out=$(basename $i)
	elif
			[[ $i == *"R2_out"* ]];
	then
			R2=$i
			R2_NAME_out=$(basename $i)
	else
			echo 'Next step =>'
	fi
	done;


	cd $(pwd)/projects/$project_name_mode/fast_data
	umi_tools whitelist --stdin $R1_NAME_out --bc-pattern=$barcode --extract-method=regex --set-cell-number=$cell --subset-reads 1000000000 --error-correct-threshold=2  --ed-above-threshold=correct --plot-prefix=$RESULT/expect_whitelist --log2stderr > $tmp/whitelist.csv ;
	umi_tools extract --bc-pattern=$barcode --extract-method=regex --stdin=$R1_NAME_out --stdout=R1_out_exctracted.fastq.gz --read2-in=$R2_NAME_out --read2-out=R2_out_extracted.fastq.gz --error-correct-cell --subset-reads 1000000000 --reconcile-pairs  --whitelist=$tmp/whitelist.csv
	gunzip R2_out_extracted.fastq.gz


	cat $tmp/whitelist.csv | cut -f 1 > $tmp/whitelist_barcodes.csv ;

	cell=`cat $tmp/whitelist_barcodes.csv  | wc -l`

	echo 'Cells detected - ' $cell

	rm R1_out.fastq.gz R2_out.fastq
	
	cd ..
	cd ..
	cd ..
	
else 

	echo 'Whitelist was done before'
	
fi


}


function STAR_MAPPING {

echo Mapping Start

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/Aligned.out.bam || -f $CHECK/human_sc_data/matrix.mtx ]];
then


	RESULT=$(pwd)/projects/$project_name_mode/results/
	INFASTP=$(pwd)/projects/$project_name_mode/fast_data
	cpu=$(grep -c ^processor /proc/cpuinfo)
	cpu=$[$cpu-2]
	DIR=$(pwd)/genome/$species/index/$READS_LENGHT 
	tmp=$(pwd)/projects/$project_name_mode/tmp/



	for i in $INFASTP/*.fastq;
	do
	if       [[ $i == *"R1_out_extracted"* ]];
	then
			R1_map=$i
			R1_NAME_map=$(basename $i)
	elif
			[[ $i == *"R2_out_extracted"* ]];
	then
			R2_map=$i
			R2_NAME_map=$(basename $i)
	else
        echo 'Next step =>'
	fi
	done;

	R2_FILE=$INFASTP'/'$R2_NAME_map

	STAR --outReadsUnmapped Fastx --outFilterMismatchNmax 20 --outSAMtype BAM Unsorted --outFilterMultimapNmax 20 --outFilterMismatchNoverLmax 0.3 --outFilterMismatchNoverReadLmax 1 --outFilterMatchNmin 0 --outFilterScoreMinOverLread 0.33 --outFilterMatchNminOverLread 0.33  --runThreadN $cpu --genomeDir $DIR --readFilesIn $R2_FILE --outFileNamePrefix $tmp --outStd Log  > $RESULT/Log.final.out 2>&1

else 

	echo 'Mapping was done before'
	
fi


}

function add_tags {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/final.bam || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	source $(pwd)/requirements_file/barcodes
	barcode_start=$barcode_start
	barcode_end=$barcode_end
	umi_start=$umi_start
	umi_end=$umi_end
	umi_length=$umi_length
	barcode_length=$barcode_length
	barcode=$barcode

	tmp=$(pwd)/projects/$project_name_mode/tmp

	samtools view -h $tmp/*.out.bam | sed 's/_/XC:Z:/' | grep -oE "XC:Z:[acgtnACGTN-]+" > $tmp/barcodes.sam
	samtools view -h $tmp/*.out.bam | sed 's/_/XC:Z:/' | sed 's/_/XM:Z:/' | grep -oE "XM:Z:[acgtnACGTN-]+" > $tmp/umis.sam

	SCRIPTS_EXTRACT=$(pwd)/scripts
	python3 $SCRIPTS_EXTRACT/add_tags.py $tmp/barcodes.sam $tmp/umis.sam $tmp/*.out.bam $tmp/final.bam $barcode_length $umi_length

else 

	echo 'Tags were added before'
	
fi


}




function dropSEQ {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/gene_exon_tagged.bam || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar TagReadWithGeneFunction \
			INPUT=$(pwd)/projects/$project_name_mode/tmp/final.bam \
			OUTPUT=$(pwd)/projects/$project_name_mode/tmp/gene_exon_tagged.bam \
			ANNOTATIONS_FILE=$(pwd)/genome/$species/correct_annotation.refFlat 
		
else 

	echo 'TagGene was done before'
	
fi


}

function final_exon {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/gene_exon_tagged_error.bam || -f $CHECK/human_sc_data/matrix.mtx ]];
then
	cpu=$(grep -c ^processor /proc/cpuinfo)
	cpu=$[$cpu-2]

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DetectBeadSubstitutionErrors \
			I=$(pwd)/projects/$project_name_mode/tmp/gene_exon_tagged.bam \
			O=$(pwd)/projects/$project_name_mode/tmp/gene_exon_tagged_error.bam \
			OUTPUT_REPORT=$(pwd)/projects/$project_name_mode/tmp/beadSubstitutionReport.txt \
			OUTPUT_SUMMARY=$(pwd)/projects/$project_name_mode/tmp/beadSubstitutionSummary.txt \
			MIN_UMIS_PER_CELL=10 \
			NUM_THREADS=$cpu
else 

	echo 'Barcodes repair was done before'
	
fi


}

function completed_bam {



CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/results/Completed.bam || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	tmp=$(pwd)/projects/$project_name_mode/tmp
	cell=`cat $tmp/whitelist_barcodes.csv  | wc -l`

	cpu=$(grep -c ^processor /proc/cpuinfo)
	cpu=$[$cpu-2]

	source $(pwd)/requirements_file/smart_primer
	smart=$smart

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DetectBeadSynthesisErrors \
			INPUT=$(pwd)/projects/$project_name_mode/tmp/gene_exon_tagged_error.bam \
			OUTPUT=$(pwd)/projects/$project_name_mode/results/Completed.bam \
			OUTPUT_STATS=$(pwd)/projects/$project_name_mode/tmp/synthesis_stats.txt \
			SUMMARY=$(pwd)/projects/$project_name_mode/tmp/synthesis_stats_summary.txt \
			MIN_UMIS_PER_CELL=10 \
			NUM_BARCODES=$[$cell*1,25] \
			PRIMER_SEQUENCE=$smart \
			NUM_THREADS=$cpu
else 

	echo 'SynthesisError was done before'
	
fi


}



##EXPRESSION FILE AND STATS

function umi_extract {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/selected_cells.sc || -f $CHECK/human_sc_data/matrix.mtx ]];
then
	tmp=$(pwd)/projects/$project_name_mode/tmp
	results=$(pwd)/projects/$project_name_mode/results
	
	samtools view $results/Completed.bam | grep -oE "XC:Z:[acgtnACGTN-]+" > $tmp/repaired_barcodes.sam
	cat $tmp/repaired_barcodes.sam | sort | uniq -c | sort -nr | sed 's/XC:Z:/\t/' > $tmp/barcode_stat.txt
	awk '{if($1 > 2450) print $2}' $tmp/barcode_stat.txt > $tmp/selected_cells.sc

else 

	echo 'UMI extraction was done before'
	
fi


}


function filtr_mice {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/results/mice/FiltredMice.bam || -f $CHECK/human_sc_data/matrix.mtx ]];
then
	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar FilterBam \
			REF_SOFT_MATCHED_RETAINED='mice' \
			INPUT=$(pwd)/projects/$project_name_mode/results/Completed.bam \
			OUTPUT=$(pwd)/projects/$project_name_mode/results/mice/FiltredMice.bam
else 

	echo 'Mice selection was done before'
	
fi

}

function filtr_human {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/results/human/FiltredHuman.bam || -f $CHECK/human_sc_data/matrix.mtx ]];
then
	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar FilterBam \
			REF_SOFT_MATCHED_RETAINED='human' \
			INPUT=$(pwd)/projects/$project_name_mode/results/Completed.bam \
			OUTPUT=$(pwd)/projects/$project_name_mode/results/human/FiltredHuman.bam
else 

	echo 'Human selection was done before'
	
fi

}





function umi_expression_mice {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/mice/umi_expression.tsv || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DigitalExpression \
			I=$(pwd)/projects/$project_name_mode/results/mice/FiltredMice.bam \
			O=$(pwd)/projects/$project_name_mode/tmp/mice/umi_expression.tsv \
			EDIT_DISTANCE=2 \
			OUTPUT_LONG_FORMAT=$(pwd)/projects/$project_name_mode/tmp/umi_expression.long \
			STRAND_STRATEGY=BOTH\
			OUTPUT_READS_INSTEAD=false\
			LOCUS_FUNCTION_LIST={INTERGENIC,INTRONIC,UTR,CODING,RIBOSOMAL}\
			MIN_BC_READ_THRESHOLD=0\
			CELL_BC_FILE=$(pwd)/projects/$project_name_mode/tmp/selected_cells.sc
			
else 

	echo 'DEG for mice was done before'
	
fi


}


function scRNAmetrics_mice {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/mice/scRNAmetrics.txt || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar SingleCellRnaSeqMetricsCollector \
			INPUT=$(pwd)/projects/$project_name_mode/results/mice/FiltredMice.bam\
			OUTPUT=$(pwd)/projects/$project_name_mode/results/mice/scRNAmetrics.txt\
			ANNOTATIONS_FILE=$(pwd)/genome/$species/correct_annotation.refFlat \
			CELL_BC_FILE=$(pwd)/projects/$project_name_mode/tmp/selected_cells.sc \
			RIBOSOMAL_INTERVALS=$(pwd)/genome/$species/annotation.rRNA.intervals
        
else 

	echo 'Metrics were done before'
	
fi	

}



function metric_plot_mice {

CHECK=$(pwd)/projects/$project_name_mode/mice_sc_data

if ! [[ -f $CHECK/matrix.mtx ]];
then

	path_metric_mice=$(pwd)/projects/$project_name_mode/results/mice
	path_result_mice=$(pwd)/projects/$project_name_mode/results/mice

	SCRIPTS_EXTRACT=$(pwd)/scripts

	Rscript $SCRIPTS_EXTRACT/rna_metrics.R $path_metric_mice $path_result_mice

else 

	echo 'Plot for mice was done before'
	
fi

}



function convert_mtx_umi_mice {

CHECK=$(pwd)/projects/$project_name_mode/mice_sc_data

if ! [[ -f $CHECK/matrix.mtx ]];
then

	path_convert=$(pwd)/projects/$project_name_mode/mice_sc_data
	mkdir -p $path_convert
	path_tmp_mtx=$(pwd)/projects/$project_name_mode/tmp/mice

	format=tsv
	con=raw
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $path_convert $null $path_tmp_mtx $con
	
else 

	echo 'Conversion was done before'
	
fi

}


function umi_expression_human {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/human/umi_expression.tsv || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	SCRIPTS_EXTRACT=$(pwd)/setup
		java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DigitalExpression \
        I=$(pwd)/projects/$project_name_mode/results/human/FiltredHuman.bam \
        O=$(pwd)/projects/$project_name_mode/tmp/human/umi_expression.tsv \
        EDIT_DISTANCE=2 \
		OUTPUT_LONG_FORMAT=$(pwd)/projects/$project_name_mode/tmp/human/umi_expression.long \
		STRAND_STRATEGY=BOTH\
		OUTPUT_READS_INSTEAD=false\
		LOCUS_FUNCTION_LIST={INTERGENIC,INTRONIC,UTR,CODING,RIBOSOMAL}\
		MIN_BC_READ_THRESHOLD=0\
		CELL_BC_FILE=$(pwd)/projects/$project_name_mode/tmp/selected_cells.sc
			
else 

	echo 'DEG for human was done before'
	
fi


}


function scRNAmetrics_human {

CHECK=$(pwd)/projects/$project_name_mode

if ! [[ -f $CHECK/tmp/human/scRNAmetrics.txt || -f $CHECK/human_sc_data/matrix.mtx ]];
then

	SCRIPTS_EXTRACT=$(pwd)/setup
	java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar SingleCellRnaSeqMetricsCollector \
			INPUT=$(pwd)/projects/$project_name_mode/results/human/FiltredHuman.bam\
			OUTPUT=$(pwd)/projects/$project_name_mode/results/human/scRNAmetrics.txt\
			ANNOTATIONS_FILE=$(pwd)/genome/$species/correct_annotation.refFlat \
			CELL_BC_FILE=$(pwd)/projects/$project_name_mode/tmp/selected_cells.sc \
			RIBOSOMAL_INTERVALS=$(pwd)/genome/$species/annotation.rRNA.intervals
        
else 

	echo 'Metrics were done before'
	
fi	

}




function metric_plot_human {

CHECK=$(pwd)/projects/$project_name_mode/human_sc_data

if ! [[ -f $CHECK/matrix.mtx ]];
then

	path_metric_human=$(pwd)/projects/$project_name_mode/results/human
	path_result_human=$(pwd)/projects/$project_name_mode/results/human


	SCRIPTS_EXTRACT=$(pwd)/scripts

	Rscript $SCRIPTS_EXTRACT/rna_metrics.R $path_metric_human $path_result_human

else 

	echo 'Plot for human was done before'
	
fi

}

function convert_mtx_umi_human {

CHECK=$(pwd)/projects/$project_name_mode/human_sc_data

if ! [[ -f $CHECK/matrix.mtx ]];
then

	path_convert=$(pwd)/projects/$project_name_mode/human_sc_data
	mkdir -p $path_convert
	path_tmp_mtx=$(pwd)/projects/$project_name_mode/tmp/human

	format=tsv
	con=raw
	null=NULL
	converter=$(pwd)/scripts/converter.R
	Rscript $converter $format $path_convert $null $path_tmp_mtx $con
	
else 

	echo 'Conversion was done before'
	
fi

}

function seurat_mix {

PATH_PROJECT=$(pwd)/projects/$project_name_mode
MARKERS=$marker_path
data=3

SCRIPTS_EXTRACT=$(pwd)/scripts
Rscript $SCRIPTS_EXTRACT/seurat_cluster_mix.R $PATH_PROJECT $MARKERS $species $project_name $data $cell

cp $SCRIPTS_EXTRACT/manual_mix.R $PATH_PROJECT/results
mv $PATH_PROJECT/results/manual_mix.R $PATH_PROJECT/results/manual_analysis.R 

CHECK=$(pwd)/projects/$project_name_mode/human_sc_data
if [[ -f $CHECK/matrix.mtx ]];
then	
rm -rf $PATH_PROJECT/tmp
rm -rf $PATH_PROJECT/fast_data/R1_out_exctracted.fastq.gz
rm -rf $PATH_PROJECT/fast_data/R2_out_extracted.fastq
rm -rf $PATH_PROJECT/fast_data/R2_out.fastq.gz
rm -rf $PATH_PROJECT/results/mice/HDMAP_subtypes_files
rm -rf $PATH_PROJECT/results/mice/UMAP_with_DE_gene_subtypes_files
rm -rf $PATH_PROJECT/results/human/HDMAP_subtypes_files
rm -rf $PATH_PROJECT/results/human/UMAP_with_DE_gene_subtypes_files

fi


}
