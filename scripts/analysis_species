#!/bin/bash

function TRIMMING {

echo Trimming Start


RESULT=$(pwd)/projects/$project_name_mode/results/
ADAPTERS=$(pwd)/requirements_file/Adapters.fa
INFASTP=$(pwd)/projects/$project_name_mode/fast_data

for d in $INFASTP/*.fastq;
do
if [[ $d != *"_out.fastq"* ]];
then

	for i in $INFASTP/*.fastq.gz;
	do
	if       [[ $i == *"R1"* ]];
	then
			R1=$i
		R1_NAME=$(basename $i)
	elif
			[[ $i == *"R2"* ]];
	then
			R2=$i
		R2_NAME=$(basename $i)
	else
			echo 'Not fastq'

	fi
	done;

	cd $INFASTP

	fastp -i $R1_NAME -I $R2_NAME -o R1_out.fastq.gz -O R2_out.fastq.gz --adapter_fasta $ADAPTERS --length_required 20 --html $RESULT/QC_RAPORT.html 

	gunzip -k R1_out.fastq.gz
	gunzip -k R2_out.fastq.gz

	rm $R1 $R2


	cd ..
	cd ..
	cd ..

else 

	echo 'Trimming was done before'
	break
fi
done;
}


function STAR_MAPPING {

echo Mapping Start

RESULT=$(pwd)/projects/$project_name_mode/results/
INFASTP=$(pwd)/projects/$project_name_mode/fast_data
cpu=$(grep -c ^processor /proc/cpuinfo)
cpu=$[$cpu-2]
DIR=$(pwd)/genome/$species/index/$READS_LENGHT 
tmp=$(pwd)/projects/$project_name_mode/tmp/

for i in $INFASTP/*.fastq;
do
if       [[ $i == *"R1"* ]];
then
        R1_map=$i
        R1_NAME_map=$(basename $i)
elif
        [[ $i == *"R2"* ]];
then
        R2_map=$i
        R2_NAME_map=$(basename $i)
else
        echo 'Next step =>'
fi
done;

R2_FILE=$INFASTP'/'$R2_NAME_map


STAR --outReadsUnmapped Fastx --outFilterMismatchNmax 10 --outFilterMismatchNoverLmax 0.3 --outFilterMismatchNoverReadLmax 1 --outFilterMatchNmin 0 --outFilterScoreMinOverLread 0.66 --outFilterMatchNminOverLread 0.66 --runThreadN $cpu --genomeDir $DIR --readFilesIn $R2_FILE --outSAMtype BAM Unsorted --outFileNamePrefix $tmp --outStd Log  > $RESULT/Log.final.out 2>&1



}

function whitelist {

source $(pwd)/requirements_file/barcodes
barcode_start=$barcode_start
barcode_end=$barcode_end
umi_start=$umi_start
umi_end=$umi_end
umi_length=$umi_length
barcode_length=$barcode_length
barcode=$barcode

INFASTP=$(pwd)/projects/$project_name_mode/fast_data
tmp=$(pwd)/projects/$project_name_mode/tmp
RESULT=$(pwd)/projects/$project_name_mode/results/


for i in $INFASTP/*.fastq.gz;
do
if       [[ $i == *"R1"* ]];
then
        R1_out=$i
        R1_NAME_out=$(basename $i)
elif
        [[ $i == *"R2"* ]];
then
        R2=$i
        R2_NAME_out=$(basename $i)
else
        echo 'Next step =>'
fi
done;


cd $(pwd)/projects/$project_name_mode/fast_data
umi_tools whitelist --stdin $R1_NAME_out --bc-pattern=$barcode --extract-method=regex --set-cell-number=$cell --plot-prefix=$RESULT/expect_whitelist --log2stderr > $tmp/whitelist.csv ;
cat $tmp/whitelist.csv | cut -f 1 > $tmp/whitelist_barcodes.csv ;

cell=`cat $tmp/whitelist_barcodes.csv  | wc -l`

echo 'Cells detected - ' $cell

cd ..
cd ..
cd ..
}

function umi_extract {


SCRIPTS_EXTRACT=$(pwd)/scripts
python3 $SCRIPTS_EXTRACT/umi_extract.py $project_name_mode


}

function merge_reads {

source $(pwd)/requirements_file/barcodes
barcode_start=$[$barcode_start-1]
barcode_end=$[$barcode_end]
umi_start=$[$umi_start-1]
umi_end=$[$umi_end]


SCRIPTS_EXTRACT=$(pwd)/scripts/
INFASTP=$(pwd)/projects/$project_name_mode/fast_data

for i in $INFASTP/*.fastq.gz;
do
if       [[ $i == *"R1"* ]];
then
        R1_py=$i
        R1_NAME_py=$(basename $i)
elif
        [[ $i == *"R2"* ]];
then
        R2_py=$i
        R2_NAME_py=$(basename $i)
fi
done;


R1_FILE=$INFASTP'/'$R1_NAME_py
python3 $SCRIPTS_EXTRACT/merge_reads.py $R1_FILE $project_name_mode $barcode_start $barcode_end $umi_start $umi_end

}


function barcodes {


SCRIPTS_EXTRACT=$(pwd)/scripts/

python3 $SCRIPTS_EXTRACT/barcodes_aligment.py $project_name_mode

}


#ref fiile generate

function create_ref {

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/picard/build/libs/picard.jar CreateSequenceDictionary \
        REFERENCE=$(pwd)/genome/$species/genome.fa \
        OUTPUT=$(pwd)/projects/$project_name_mode/tmp/genome.dict

}

function reduce_annotation_gtf {

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar ReduceGtf \
        GTF=$(pwd)/genome/$species/correct_annotation.gtf \
        OUTPUT=$(pwd)/projects/$project_name_mode/tmp/reduced_annotation.gtf \
        SEQUENCE_DICTIONARY=$(pwd)/projects/$project_name_mode/tmp/genome.dict \
        IGNORE_FUNC_TYPE=null \
        ENHANCE_GTF=false

}

function create_ref_annotation {

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar ConvertToRefFlat \
        ANNOTATIONS_FILE=$(pwd)/genome/$species/correct_annotation.gtf \
        OUTPUT=$(pwd)/projects/$project_name_mode/tmp/correct_annotation.refFlat \
        SEQUENCE_DICTIONARY=$(pwd)/projects/$project_name_mode/tmp/genome.dict

}


function dropSEQ {

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar TagReadWithGeneFunction \
        INPUT=$(pwd)/projects/$project_name_mode/tmp/Map_barcodes.out.bam \
        OUTPUT=$(pwd)/projects/$project_name_mode/tmp/gene_exon_tagged.bam \
        ANNOTATIONS_FILE=$(pwd)/projects/$project_name_mode/tmp/correct_annotation.refFlat 

}

function final_exon {

cpu=$(grep -c ^processor /proc/cpuinfo)
cpu=$[$cpu-2]

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DetectBeadSubstitutionErrors \
        I=$(pwd)/projects/$project_name_mode/tmp/gene_exon_tagged.bam \
        O=$(pwd)/projects/$project_name_mode/tmp/gene_exon_tagged_error.bam \
        OUTPUT_REPORT=$(pwd)/projects/$project_name_mode/tmp/beadSubstitutionReport.txt \
        OUTPUT_SUMMARY=$(pwd)/projects/$project_name_mode/tmp/beadSubstitutionSummary.txt \
        NUM_THREADS=$cpu

}

function completed_bam {

tmp=$(pwd)/projects/$project_name_mode/tmp
bad=`sed '7q;d' $tmp/beadSubstitutionReport.txt | grep -o '[0-9]*'`


cpu=$(grep -c ^processor /proc/cpuinfo)
cpu=$[$cpu-2]

source $(pwd)/requirements_file/smart_primer
smart=$smart

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DetectBeadSynthesisErrors \
        INPUT=$(pwd)/projects/$project_name_mode/tmp/gene_exon_tagged_error.bam \
        OUTPUT=$(pwd)/projects/$project_name_mode/results/Completed.bam \
        OUTPUT_STATS=$(pwd)/projects/$project_name_mode/tmp/synthesis_stats.txt \
        SUMMARY=$(pwd)/projects/$project_name_mode/tmp/synthesis_stats_summary.txt \
        NUM_BARCODES=$bad \
		PRIMER_SEQUENCE=$smart \
        NUM_THREADS=$cpu

}


function rna_intervals {

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar CreateIntervalsFiles \
        REDUCED_GTF=$(pwd)/projects/$project_name_mode/tmp/reduced_annotation.gtf \
        SEQUENCE_DICTIONARY=$(pwd)/projects/$project_name_mode/tmp/genome.dict \
        O=$(pwd)/projects/$project_name_mode/tmp/ \
        PREFIX='/annotation'

}

##EXPRESSION FILE AND STATS

function umi_expression {

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar DigitalExpression \
        I=$(pwd)/projects/$project_name_mode/results/Completed.bam \
        O=$(pwd)/projects/$project_name_mode/tmp/umi_expression.tsv \
        EDIT_DISTANCE=1 \
        OUTPUT_LONG_FORMAT=$(pwd)/projects/$project_name_mode/tmp/umi_expression.long \
        STRAND_STRATEGY=SENSE\
        OUTPUT_READS_INSTEAD=false\
        LOCUS_FUNCTION_LIST={CODING,UTR}\
        MIN_BC_READ_THRESHOLD=0\
        CELL_BC_FILE=$(pwd)/projects/$project_name_mode/tmp/whitelist_barcodes.csv
}


function scRNAmetrics {

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar SingleCellRnaSeqMetricsCollector \
        INPUT=$(pwd)/projects/$project_name_mode/results/Completed.bam\
        OUTPUT=$(pwd)/projects/$project_name_mode/tmp/scRNAmetrics.txt\
        ANNOTATIONS_FILE=$(pwd)/projects/$project_name_mode/tmp/correct_annotation.refFlat \
        CELL_BC_FILE=$(pwd)/projects/$project_name_mode/tmp/whitelist_barcodes.csv \
        RIBOSOMAL_INTERVALS=$(pwd)/projects/$project_name_mode/tmp/annotation.rRNA.intervals
        
		
}


function metric_plot {

path_metric=$(pwd)/projects/$project_name_mode/tmp
path_result=$(pwd)/projects/$project_name_mode/results

SCRIPTS_EXTRACT=$(pwd)/scripts

Rscript $SCRIPTS_EXTRACT/rna_metrics.R $path_metric $path_result

}



function convert_mtx_umi {

path_convert=$(pwd)/projects/$project_name_mode/sc_data
path_tmp_mtx=$(pwd)/projects/$project_name_mode/tmp

SCRIPTS_EXTRACT=$(pwd)/scripts

python3 $SCRIPTS_EXTRACT/convert_mtx_umi.py $path_convert $path_tmp_mtx

}


function seurat {

PATH_PROJECT=$(pwd)/projects/$project_name_mode
MARKERS=$marker_path
data=3

SCRIPTS_EXTRACT=$(pwd)/scripts
Rscript $SCRIPTS_EXTRACT/seurat_cluster_species.R $PATH_PROJECT $MARKERS $species $project_name $data $cell

cp $SCRIPTS_EXTRACT/manual_species.R $PATH_PROJECT/results
mv $PATH_PROJECT/results/manual_species.R $PATH_PROJECT/results/manual_analysis.R 
}
