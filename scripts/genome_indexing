#!/bin/bash 

#ref fiile generate

function create_ref {
cpu=$(grep -c ^processor /proc/cpuinfo)
cpu=$cpu-2
DIR=$(pwd)/genome/$species/index/$READS_LENGHT 
GENOME=$(pwd)/genome/$species


SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/picard/build/libs/picard.jar CreateSequenceDictionary \
        REFERENCE=$(pwd)/genome/$species/genome.fa \
        OUTPUT=$(pwd)/genome/$species/genome.dict

}


function rna_intervals {

SCRIPTS_EXTRACT=$(pwd)/setup
java -jar $SCRIPTS_EXTRACT/DropSeq/jar/dropseq.jar CreateIntervalsFiles \
        REDUCED_GTF=$(pwd)/genome/$species/reduced_annotation.gtf \
        SEQUENCE_DICTIONARY=$(pwd)/genome/$species/genome.dict \
        O=$(pwd)/genome/$species/ \
        PREFIX='/annotation'
}

#########################################################################################################################


function GENOME {

echo -e '\033[1;36m Enter the species [human/mice/mix/custom]:'
echo ''

read species
#config
source $(pwd)/requirements_file/genome.conf
human_genome=$human_genome
human_annotation=$human_annotation

mice_genome=$mice_genome
mice_annotation=$mice_annotation

custom_genome=$custom_genome
custom_annotation=$custom_annotation

species=$(echo $species | tr '[:upper:]' '[:lower:]')
source=$(pwd)/scripts
input_mice=$(pwd)/genome/$species/annotation_mice.gtf
input_human=$(pwd)/genome/$species/annotation_human.gtf
output_mix=$(pwd)/genome/$species/annotation.gtf
CHECK=$(pwd)/genome


if [[ $species == 'human' ]]
then

        mkdir -p genome
		mkdir -p genome/$species
        cd genome/$species
        wget ${human_annotation} -O annotation.gtf.gz
		gunzip annotation.gtf.gz
		wget ${human_genome} -O genome.fa.gz
		gunzip genome.fa.gz
		
		cd ..
		cd ..
		
		echo -e "\033[0;34m $(date) Creating genome reference files"
		create_ref  
	
		Rscript $source/genome_prep.R $species $(pwd)/genome/$species/annotation.gtf $(pwd)/genome/$species
		
		echo -e "\033[0;34m $(date) Generating of the intervals"
		rna_intervals
		
		echo -e "\033[0;32m $(date) Process DONE!"

		
		
	
start

elif [[ $species == 'mice' ]]
then
		mkdir -p genome
        mkdir -p genome/$species
        cd genome/$species
		
        wget ${mice_annotation} -O annotation.gtf.gz
		gunzip annotation.gtf.gz
		wget ${mice_genome} -O genome.fa.gz
		gunzip genome.fa.gz
		
		cd ..
		cd ..
		
		echo -e "\033[0;34m $(date) Creating genome reference files"
		create_ref  
	
		Rscript $source/genome_prep.R $species $(pwd)/genome/$species/annotation.gtf $(pwd)/genome/$species
		
		echo -e "\033[0;34m $(date) Generating of the intervals"
		rna_intervals
		
		echo -e "\033[0;32m $(date) Process DONE!"


start


elif [[ $species == 'mix' ]]
then	
		
		
		mkdir -p genome
		mkdir -p genome/$species
        cd genome/$species
        
		
		if  [[ -f $CHECK/human/genome.fa ]];
		then
		cp $CHECK/human/genome.fa genome_human.fa
		cp $CHECK/human/annotation.gtf annotation_human.gtf
		
		else
		
		
		wget ${human_annotation} -O annotation_human.gtf.gz
		gunzip annotation_human.gtf.gz
		wget ${human_genome} -O genome_human.fa.gz
		gunzip genome_human.fa.gz
		
		fi
		
		sed -e 's/>/>human_/g' genome_human.fa > renamed_genome_human.fa
	

		if  [[ -f $CHECK/mice/genome.fa ]];
		then
		cp $CHECK/mice/genome.fa genome_mice.fa
		cp $CHECK/mice/annotation.gtf annotation_mice.gtf
		
		else
		
		
		wget ${mice_annotation} -O annotation_mice.gtf.gz
		gunzip annotation_mice.gtf.gz
		wget ${mice_genome} -O genome_mice.fa.gz
		gunzip genome_mice.fa.gz
		
		fi
		
		sed -e 's/>/>mice_/g' genome_mice.fa > renamed_genome_mice.fa
	
		cat renamed_genome_human.fa renamed_genome_mice.fa > genome.fa
	
		echo $(date) 'Annotations merging'
		
		rm renamed_genome_human.fa
		rm renamed_genome_mice.fa
		rm genome_human.fa
		rm genome_mice.fa
		
		cd ..
		cd ..
		
		python3 $source/merge_genome.py $input_mice $input_human $output_mix
		
		echo -e "\033[0;34m $(date) Creating genome reference files"
		create_ref  
	
		Rscript $source/genome_prep.R $species $(pwd)/genome/$species/annotation.gtf $(pwd)/genome/$species
		
		echo -e "\033[0;34m $(date) Generating of the intervals"
		rna_intervals
		
		echo -e "\033[0;32m $(date) Process DONE!"
		
	

		
	
start

elif [[ $species == 'custom' ]]
then
		mkdir -p genome
        mkdir -p genome/$species
        cd genome/$species
		
        wget ${custom_annotation} -O annotation.gtf.gz
		gunzip annotation.gtf.gz
		wget ${custom_genome} -O genome.fa.gz
		gunzip genome.fa.gz
		
		cd ..
		cd ..
		
		echo -e "\033[0;34m $(date) Creating genome reference files"
		create_ref  
	
		Rscript $source/genome_prep.R $species $(pwd)/genome/$species/annotation.gtf $(pwd)/genome/$species
		
		echo -e "\033[0;34m $(date) Generating of the intervals"
		rna_intervals
		
		echo -e "\033[0;32m $(date) Process DONE!"

		
start

fi

}



function index_file {

index_files=$(pwd)/genome/$species/index/*


for i in $index_files
do
r=$(basename $i)
if [[ $r == $READS_LENGHT ]]
then

check_index=$READS_LENGHT


fi
done

}

function INDEXING {

index_file

echo ''
echo -e "\033[0;34m $(date) Genome indexing start..."
echo ''


if [[ $check_index != $READS_LENGHT ]]
then

echo ''
echo -e "\033[0;34m Start indexing"
echo ''

mkdir -p genome/$species/index/$READS_LENGHT 
cpu=$(grep -c ^processor /proc/cpuinfo)
cpu=$cpu-2
DIR=$(pwd)/genome/$species/index/$READS_LENGHT 
GENOME=$(pwd)/genome/$species
lenght=$READS_LENGHT

mem=$(($(getconf _PHYS_PAGES) * $(getconf PAGE_SIZE) / (1024 * 1024)))
mem=$[$mem * 1000000]

STAR --runThreadN $cpu  --runMode genomeGenerate --genomeDir $DIR  --genomeFastaFiles $GENOME/*.fa  --sjdbGTFfile $GENOME/correct_annotation.gtf --limitGenomeGenerateRAM $mem --sjdbOverhang $lenght

echo -e "\033[0;32m $(date) Genome indexing done"


echo ''
echo ''

start

elif [[ $check_index == $READS_LENGHT ]]
then	
	
echo ''
echo -e "\033[0;34m Index' $READS_LENGHT 'for' $species 'already exist"
echo -e "\033[0;34m You can run analysis"
echo ''

species=

start

fi

}


