#!/bin/bash


function container_install {


echo ''
echo -e '\033[1;32m To start the installation, Docker must be installed beforehand.'
echo -e '\033[1;32m If Docker is already installed, you can initiate the installation by using the install option,' 
echo -e '\033[1;32m which allows for installation via a Dockerfile, or by using the pull option,'
echo -e '\033[1;32m which retrieves a pre-built Docker image.'
echo ''
echo -e '\033[1;32m If you need help click ------>  \e]8;;https://docs.docker.com/engine/install/\e\\How to install docker?\e]8;;\e\\'

echo ''
echo -e '\033[1;36m Select option:'
echo ''
echo -e '\033[1;36m  -> Docker container installation [install]'
echo -e '\033[1;36m  -> Docker container pulling [pull]'
echo -e '\033[1;36m  -> Back [back]'
echo ''
		read con
		con=$(echo $con | tr '[:upper:]' '[:lower:]')

if [[ $con == 'install' ]]
then
	
	log_install=$(pwd)/setup/install.log.out
	
	sudo apt-get -y install unzip >> $log_install 2>&1
	sudo apt -y install python3.8  >> $log_install 2>&1
    sudo apt -y install python3-pip  >> $log_install 2>&1
	sudo pip3 install gdown >> $log_install 2>&1
    sudo apt-get update >> $log_install 2>&1
	
	cd setup 
	
	echo -e "\033[0;31m $(date) Localhost env preparing..."
	if [ -d "Drop-seq_tools-2.4.0" ]; then
	
    rm -rf Drop-seq_tools-2.4.0
    
	fi
	
	gdown 1deqNjK2Ix_O0yPQTnXqD6ShX2WYH5PAz
	unzip Drop-seq_tools-2.4.0.zip >> $log_install 2>&1
	rm -r Drop-seq_tools-2.4.0.zip >> $log_install 2>&1
	mv Drop-seq_tools-2.4.0 DropSeq >> $log_install 2>&1

	

	cd ..
	
	echo -e "\033[0;31m $(date) Docker build starting..."
	sudo DOCKER_BUILDKIT=1 docker build --build-arg BUILDKIT_STEP_LOG_MAX_SIZE=10485760 --no-cache -t jseq -f Dockerfile .
	id=$(docker images --format "{{.ID}}" jseq)

	length=${#id}

	length=${#id}
	
	if [[ $length -ge 4 && $length -le 20 ]]; then
    	
		echo $id
		echo id=$id > $(pwd)/setup/docker_id
		docker run --privileged --rm -it -v $(pwd):/app/JSEQ_scRNAseq -e fun_run=True $id 
	else
		echo ''
		echo -e '\033[1;31m !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
		echo ''
		echo -e '\033[1;31m The trouble with Docker'
		echo -e '\033[1;31m Check if Docker is running or even installed'
		echo -e '\033[1;31m If you have problems, read the README or don`t hesitate to contact us!'
		echo ''
		echo -e '\033[1;31m !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
		echo ''

		starting_point

	fi
	
	
	
elif [[ $con == 'pull' ]]
then

    log_install=$(pwd)/setup/install.log.out
	
	sudo apt-get -y install unzip >> $log_install 2>&1
	sudo apt -y install python3.8  >> $log_install 2>&1
    sudo apt -y install python3-pip  >> $log_install 2>&1
	sudo pip3 install gdown >> $log_install 2>&1
    sudo apt-get update >> $log_install 2>&1
	
	cd setup 
	
	echo -e "\033[0;31m $(date) Localhost env preparing..."
	if [ -d "Drop-seq_tools-2.4.0" ]; then
	
    rm -rf Drop-seq_tools-2.4.0
    
	fi
	
	gdown 1deqNjK2Ix_O0yPQTnXqD6ShX2WYH5PAz
	unzip Drop-seq_tools-2.4.0.zip >> $log_install 2>&1
	rm -r Drop-seq_tools-2.4.0.zip >> $log_install 2>&1
	mv Drop-seq_tools-2.4.0 DropSeq >> $log_install 2>&1


	cd ..
	
	echo -e "\033[0;31m $(date) Docker pull starting..."
	sudo docker pull jkubis96/jseq_scrnaseq:jseq
	id=$(docker images --format "{{.ID}}" jkubis96/jseq_scrnaseq)
	
	length=${#id}
	
	if [[ $length -ge 4 && $length -le 20 ]]; then
    	
		echo $id
		echo id=$id > $(pwd)/setup/docker_id
		docker run --privileged --rm -it -v $(pwd):/app/JSEQ_scRNAseq -e fun_run=True $id 
	else
		echo ''
		echo -e '\033[1;31m !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
		echo ''
		echo -e '\033[1;31m The trouble with Docker'
		echo -e '\033[1;31m Check if Docker is running or even installed'
		echo -e '\033[1;31m If you have problems, read the README or don`t hesitate to contact us!'
		echo ''
		echo -e '\033[1;31m !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
		echo ''

		starting_point

	fi
	
	
	
elif [[ $con == 'back' ]]
then

    starting_point
	
else 
		container_install
fi

}



function starting_point {

echo ''
echo -e '\033[1;33m Welcome to the JSEQ_scRNAseq© tool'
echo -e '\033[1;33m The pipeline was prepared at the Institute of Bioorganic Chemistry, Polish Academy of Sciences'
echo -e '\033[1;33m All information and references you can check README on GitHub'
echo -e '\033[1;33m Contact: jbiosystem@gmail.com or jakub.kubis1996@gmail.com'
echo ''
echo ''

echo -e '\033[1;36m Select option:'
echo ''
echo -e '\033[1;36m  -> Install [install]'
echo -e '\033[1;36m  -> Start program [start]'
echo -e '\033[1;36m  -> Exit [q]'
echo ''
	

echo ''
		read l
		l=$(echo $l | tr '[:upper:]' '[:lower:]')


if [[ $l == 'install' ]]
then

container_install
		
elif [[ $l == 'start' ]]
then
    
	if [[ -f $(pwd)/setup/docker_id ]];
	then

		source $(pwd)/setup/docker_id
		id=$id
		docker run --privileged --rm -it -v $(pwd):/app/JSEQ_scRNAseq -e fun_run=True $id 
	
	else
		
		echo ''
		echo -e '\033[1;31m !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
		echo ''
		echo -e '\033[1;31m The JSEQ_scRNAseq© tool has not been installed'
		echo -e '\033[1;31m The tool must be installed before starting'
		echo -e '\033[1;31m Check if Docker is installed and install the JSEQ_scRNAseq© tool'
		echo -e '\033[1;31m If you have problems, read the README or don`t hesitate to contact us!'
		echo ''
		echo -e '\033[1;31m !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
		echo ''

		starting_point

	fi
	
elif [[ $l == 'q' ]]
then

	exit

else 
		starting_point
fi

}

starting_point



# function start {

# echo ''
# echo -e '\033[1;36m Select JSEQ_scRNAseq function:'
# echo -e '\033[1;36m -local installation [install]'
# echo -e '\033[1;36m -download RefGenome [genome]'
# echo -e '\033[1;36m -creat new project [project]'
# echo -e '\033[1;36m -start analysis [analysis]'
# echo -e '\033[1;36m -quit [q]'
# echo ''
# echo -e '\033[1;36m Select function:'
# echo ''
# 	read s
# 	s=$(echo $s | tr '[:upper:]' '[:lower:]')

# if [[ $s == 'install' ]]
# then
# 		log_install=$(pwd)/setup/install.log.out

#         source=$(pwd)/setup/setup
#         cd $(pwd)/setup
#         source $source
# 		permission 
# 		echo -e "\033[0;34m $(date) Python installing and libraries..."
# 		python >> $log_install 2>&1
# 		echo -e "\033[0;34m $(date) R installing and libraries..."
# 		r_base >> $log_install 2>&1
# 		echo -e "\033[0;34m $(date) JAVA installing..."
# 		java >> $log_install 2>&1
# 		echo -e "\033[0;34m $(date) SAMtools installing..."
# 		SAMtools >> $log_install 2>&1
# 		echo -e "\033[0;34m $(date) STAR installing..."
# 		STAR >> $log_install 2>&1
# 		echo -e "\033[0;34m $(date) fastp installing and libraries..."
# 		fastp >> $log_install 2>&1
# 		echo -e "\033[0;34m $(date) dropSEQtools installing..."
# 		DropSeq >> $log_install 2>&1
#         cd ..
# 		echo ''
# 		echo "Installing completed. Before run the JSEQ_scRNAseq check the install.log file in setup directory for some errors."
# 		echo $"If you have trouble with installing any parts of the pipeline, you can try install missing files or read README or contact us"
# 		echo ''
# 		start
		
# elif [[ $s == 'genome' ]]
# then
#         source=$(pwd)/scripts/genome_indexing
# 		source $source
# 		GENOME
		
		
# elif [[ $s == 'project' ]]
# then
#         source=$(pwd)/scripts/projects
# 		source $source
# 		PROJECT
		
		
# elif [[ $s == 'analysis' ]]
# then
# 		source=$(pwd)/scripts
# 		source $source/project_selection
# 		select_analysis
		
# function experiment_selection {
# 		if [[ $d  == *'fq'* && $species  == 'human' ]] || [[ $d  == *'fq'* && $species  == 'mice' ]] || [[ $d  == *'fq'* && $species  == 'custom' ]];
# then
# 		log=$(pwd)/projects/$project_name_mode/results/process.log.out
#         source=$(pwd)/scripts
# 		source $source/analysis_species
# 		echo ''
# 		echo -e "\033[0;34m Process start..."
# 		echo ''
# 		echo -e "\033[1;33m WARNING! Depending on data set volume and data heterogeneity a whole analysis can last even several hours" 
# 		echo ''
# 		echo -e "\033[0;34m $(date) Trimming of the adapters and quality control of the reads"
# 		TRIMMING >> $log 2>&1
# 		echo -e "\033[0;34m $(date) UMIs and barcodes extraction"
# 		whitelist >> $log 2>&1
# 		echo -e "\033[0;34m $(date) Starting of the mapping process"
# 		STAR_MAPPING >> $log 2>&1
# 		echo -e "\033[0;34m $(date) Adding UMI and barcode tags to bam file"
# 		add_tags >> $log 2>&1	
# 		echo -e "\033[0;34m $(date) Annotation to transcriptome regions"
# 		dropSEQ >> $log 2>&1
# 		echo -e "\033[0;34m $(date) Detecting and repairing substitution errors in the cell barcodes"
# 		final_exon >> $log 2>&1
# 		echo -e "\033[0;34m $(date) Detecting and repairing barcode indexes synthesis errors"
# 		completed_bam >> $log 2>&1
# 		echo -e "\033[0;34m $(date) Creating count statistics"
# 		umi_extract >> $log 2>&1
# 		umi_expression >> $log 2>&1
# 		echo -e "\033[0;34m $(date) Creating RNA metrics"
# 		scRNAmetrics >> $log 2>&1
# 		metric_plot >> $log 2>&1
# 		echo -e "\033[0;34m $(date) Creating matrix of counts"
# 		convert_mtx_umi >> $log 2>&1
# 		echo -e "\033[0;34m $(date) Counts analysis and creating report"
# 		seurat >> $log 2>&1
# 		echo ''
# 		echo -e "\033[0;32m Process completed"
# 		echo ''
# 		echo -e "\033[1;33m Check $project_name_mode for the results (REPORT). If you don't see the REPORT file, so check process.log file for some errors"
# 		echo ''
# 		start
		

		
# elif	[[ $species  == 'human' && $d  == *'_exp'* ]] || [[ $species  == 'mice' && $d  == *'_exp'* ]] || [[ $species  == 'custom' && $d  == *'_exp'* ]]
# then

# 		log=$(pwd)/projects/$project_name_mode/results/process.log.out
		
# 		source=$(pwd)/scripts
# 		source $source/seurat_analysis
# 		echo ''
# 		echo -e "\033[0;34m Process start..."
# 		echo ''
# 		echo -e "\033[1;33m WARNING! Depending on data set volume and data heterogeneity a whole analysis can last even several hours" 
# 		echo ''
# 		echo -e "\033[0;34m $(date) Counts analysis and creating report"	
# 		seurat_start >> $log 2>&1
# 		echo ''
# 		echo -e "\033[0;32m Process completed"
# 		echo ''
# 		echo -e "\033[1;33m Check $project_name_mode for the results (REPORT). If you don't see the REPORT file, so check process.log file for some errors"
# 		echo ''
# else
#         echo ''
# 		echo -e "\033[0;31m Experiment failed - check all the data from project"
# 		echo ''
# 		start
# fi
# }

# experiment_selection

# elif [[ $s == 'q' ]]
# then
#         exit
		
# else
#         start
# fi


# }

# function container {

# echo ''
# echo -e '\033[1;36m Select function:'
# echo -e '\033[1;36m -docker container installation [install]'
# echo -e '\033[1;36m -docker container pulling [pull]'
# echo -e '\033[1;36m -start container [start]'
# echo ''
# 		read con
# 		con=$(echo $con | tr '[:upper:]' '[:lower:]')

# if [[ $con == 'install' ]]
# then
	
# 	log_install=$(pwd)/setup/install.log.out
	
# 	sudo apt-get -y install unzip >> $log_install 2>&1
# 	sudo apt -y install python3.8  >> $log_install 2>&1
#     sudo apt -y install python3-pip  >> $log_install 2>&1
# 	sudo pip3 install gdown >> $log_install 2>&1
#     sudo apt-get update >> $log_install 2>&1
	
# 	cd setup 
	
# 	echo -e "\033[0;31m $(date) Localhost env preparing..."
# 	if [ -d "Drop-seq_tools-2.4.0" ]; then
	
#     rm -rf Drop-seq_tools-2.4.0
    
# 	fi
	
# 	gdown 1deqNjK2Ix_O0yPQTnXqD6ShX2WYH5PAz
# 	unzip Drop-seq_tools-2.4.0.zip >> $log_install 2>&1
# 	rm -r Drop-seq_tools-2.4.0.zip >> $log_install 2>&1
# 	mv Drop-seq_tools-2.4.0 DropSeq >> $log_install 2>&1

	

# 	cd ..
	
# 	echo -e "\033[0;31m $(date) Docker build starting..."
# 	sudo DOCKER_BUILDKIT=1 docker build --build-arg BUILDKIT_STEP_LOG_MAX_SIZE=10485760 --no-cache -t jseq -f Dockerfile .
# 	id=$(docker images --format "{{.ID}}" jseq)
# 	echo $id
# 	echo id=$id > $(pwd)/setup/docker_id
# 	docker run --privileged --rm -it -v $(pwd):/app/JSEQ_scRNAseq -e fun_run=True $id 

	
	
# elif [[ $con == 'pull' ]]
# then

#     log_install=$(pwd)/setup/install.log.out
	
# 	sudo apt-get -y install unzip >> $log_install 2>&1
# 	sudo apt -y install python3.8  >> $log_install 2>&1
#     sudo apt -y install python3-pip  >> $log_install 2>&1
# 	sudo pip3 install gdown >> $log_install 2>&1
#     sudo apt-get update >> $log_install 2>&1
	
# 	cd setup 
	
# 	echo -e "\033[0;31m $(date) Localhost env preparing..."
# 	if [ -d "Drop-seq_tools-2.4.0" ]; then
	
#     rm -rf Drop-seq_tools-2.4.0
    
# 	fi
	
# 	gdown 1deqNjK2Ix_O0yPQTnXqD6ShX2WYH5PAz
# 	unzip Drop-seq_tools-2.4.0.zip >> $log_install 2>&1
# 	rm -r Drop-seq_tools-2.4.0.zip >> $log_install 2>&1
# 	mv Drop-seq_tools-2.4.0 DropSeq >> $log_install 2>&1


# 	cd ..
	
# 	echo -e "\033[0;31m $(date) Docker pull starting..."
# 	sudo docker pull jkubis96/jseq_scrnaseq:jseq
# 	id=$(docker images --format "{{.ID}}" jkubis96/jseq_scrnaseq)
# 	echo $id
# 	echo id=$id > $(pwd)/setup/docker_id
# 	docker run --privileged --rm -it -v $(pwd):/app/JSEQ_scRNAseq -e fun_run=True $id 

	
	
	
# elif [[ $con == 'start' ]]
# then

#     source $(pwd)/setup/docker_id
# 	id=$id
# 	docker run --privileged --rm -it -v $(pwd):/app/JSEQ_scRNAseq -e fun_run=True $id 

	
	
# else 
# 		container
# fi

# }




